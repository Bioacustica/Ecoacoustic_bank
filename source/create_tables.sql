BEGIN;


CREATE TABLE IF NOT EXISTS public.FUNDING
(
    ID_FUNDING SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_FUNDING)
);

CREATE TABLE IF NOT EXISTS public.PROJECT
(
    ID_PROJECT SERIAL,
    ID_FUNDING integer NOT NULL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_PROJECT)
);

CREATE TABLE IF NOT EXISTS public.SEASON
(
    ID_SEASON SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_SEASON)
);

CREATE TABLE IF NOT EXISTS public.STUDIO
(
    ID_STUDIO SERIAL,
    ID_PROJECT integer NOT NULL,
    ID_CATALOGER integer NOT NULL,
    ID_SEASON integer NOT NULL,
    DATE timestamp without time zone,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_STUDIO)
);

CREATE TABLE IF NOT EXISTS public.USER
(
    ID_USER SERIAL,
    NAME character varying(100),
    EMAIL character varying(100),
    PRIMARY KEY (ID_USER)
);

CREATE TABLE IF NOT EXISTS public.TYPE
(
    ID_TYPE SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_TYPE)
);

CREATE TABLE IF NOT EXISTS public.EVENT
(
    ID_EVENT SERIAL,
    ID_TYPE integer NOT NULL,
    PRIMARY KEY (ID_EVENT)
);

CREATE TABLE IF NOT EXISTS public.EVIDENCE
(
    ID_EVIDENCE SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_EVIDENCE)
);

CREATE TABLE public.PRECISION
(
    ID_PRECISION SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_PRECISION)
);

CREATE TABLE IF NOT EXISTS public.DATUM
(
    ID_DATUM SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_DATUM)
);

CREATE TABLE IF NOT EXISTS public.FORMAT
(
    ID_FORMAT SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_FORMAT)
);

CREATE TABLE IF NOT EXISTS public.RECORD_OBS
(
    ID_RECORD_OBS SERIAL,
    ID_RECORD integer NOT NULL,
    OBSERVATION character varying(100),
    PRIMARY KEY (ID_RECORD_OBS)
);

CREATE TABLE IF NOT EXISTS public.CATALOG_OBS
(
    ID_CATALOG_OBS SERIAL,
    ID_CATALOG integer NOT NULL,
    OBSERVATION character varying(100),
    PRIMARY KEY (ID_CATALOG_OBS)
);

CREATE TABLE IF NOT EXISTS public.HABITAT
(
    ID_HABITAT SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_HABITAT)
);

CREATE TABLE IF NOT EXISTS public.MEMORY
(
    ID_MEMORY SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_MEMORY)
);

CREATE TABLE IF NOT EXISTS public.CASE
(
    ID_CASE SERIAL,
    DESCRIPTION character varying(100),
    PRIMARY KEY (ID_CASE)
);

CREATE TABLE IF NOT EXISTS public.SUPPLY
(
    ID_SUPPLY SERIAL,
    DESCRIPTION character varying,
    PRIMARY KEY (ID_SUPPLY)
);

CREATE TABLE IF NOT EXISTS public.HARDWARE
(
    ID_HARDWARE SERIAL,
    DESCRIPTION character varying,
    PRIMARY KEY (ID_HARDWARE)
);

CREATE TABLE IF NOT EXISTS public.LABELED
(
    ID_LABELED SERIAL,
    ID_EVENT integer NOT NULL,
    ID_RECORD integer NOT NULL,
    ID_EVIDENCE integer NOT NULL,
    ID_LABELER integer NOT NULL,
    BEGIN integer,
    LABEL_END integer,
    PRIMARY KEY (ID_LABELED)
);

CREATE TABLE IF NOT EXISTS public.RECORD
(
    ID_RECORD SERIAL,
    ID_CATALOG integer NOT NULL,
    ID_FORMAT integer NOT NULL,
    FINGERPRINT character varying(64),
    PATH character varying(150),
    DATE timestamp without time zone,
    LENGTH integer,
    SIZE real,
    SAMPLE_RATE integer,
    CHUNK integer,
    CHANNELS integer,
    PRIMARY KEY (ID_RECORD)
);

CREATE TABLE IF NOT EXISTS public.CATALOG
(
    ID_CATALOG SERIAL,
    ID_STUDIO integer NOT NULL,
    ID_COLLECTOR integer NOT NULL,
    ID_SERIAL integer NOT NULL,
    ID_SUPPLY integer NOT NULL,
    ID_CASE integer NOT NULL,
    ID_MEMORY integer NOT NULL,
    ID_HABITAT integer NOT NULL,
    ID_PRECISION integer NOT NULL,
    ID_DATUM integer NOT NULL,
    ELEVATION integer,
    COORDINATES point,
    HEIGHT integer,
    CHUNKS integer,
    SIZE real,
    PRIMARY KEY (ID_CATALOG)
);

ALTER TABLE public.PROJECT
    ADD FOREIGN KEY (ID_FUNDING)
    REFERENCES public.FUNDING (ID_FUNDING)
    NOT VALID;


ALTER TABLE public.STUDIO
    ADD FOREIGN KEY (ID_CATALOGER)
    REFERENCES public.USER (ID_USER)
    NOT VALID;


ALTER TABLE public.STUDIO
    ADD FOREIGN KEY (ID_PROJECT)
    REFERENCES public.PROJECT (ID_PROJECT)
    NOT VALID;


ALTER TABLE public.STUDIO
    ADD FOREIGN KEY (ID_SEASON)
    REFERENCES public.SEASON (ID_SEASON)
    NOT VALID;


ALTER TABLE public.EVENT
    ADD FOREIGN KEY (ID_TYPE)
    REFERENCES public.TYPE (ID_TYPE)
    NOT VALID;


ALTER TABLE public.LABELED
    ADD FOREIGN KEY (ID_EVENT)
    REFERENCES public.EVENT (ID_EVENT)
    NOT VALID;


ALTER TABLE public.LABELED
    ADD FOREIGN KEY (ID_RECORD)
    REFERENCES public.RECORD (ID_RECORD)
    NOT VALID;


ALTER TABLE public.LABELED
    ADD FOREIGN KEY (ID_EVIDENCE)
    REFERENCES public.EVIDENCE (ID_EVIDENCE)
    NOT VALID;


ALTER TABLE public.LABELED
    ADD FOREIGN KEY (ID_EVIDENCE)
    REFERENCES public.EVIDENCE (ID_EVIDENCE)
    NOT VALID;


ALTER TABLE public.LABELED
    ADD FOREIGN KEY (ID_LABELER)
    REFERENCES public.USER (ID_USER)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_STUDIO)
    REFERENCES public.STUDIO (ID_STUDIO)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_COLLECTOR)
    REFERENCES public.USER (ID_USER)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_SUPPLY)
    REFERENCES public.SUPPLY (ID_SUPPLY)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_CASE)
    REFERENCES public.CASE (ID_CASE)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_MEMORY)
    REFERENCES public.MEMORY (ID_MEMORY)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_HABITAT)
    REFERENCES public.HABITAT (ID_HABITAT)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_PRECISION)
    REFERENCES public.PRECISION (ID_PRECISION)
    NOT VALID;


ALTER TABLE public.CATALOG
    ADD FOREIGN KEY (ID_DATUM)
    REFERENCES public.DATUM (ID_DATUM)
    NOT VALID;


ALTER TABLE public.RECORD
    ADD FOREIGN KEY (ID_FORMAT)
    REFERENCES public.FORMAT (ID_FORMAT)
    NOT VALID;


ALTER TABLE public.RECORD_OBS
    ADD FOREIGN KEY (ID_RECORD)
    REFERENCES public.RECORD (ID_RECORD)
    NOT VALID;


ALTER TABLE public.CATALOG_OBS
    ADD FOREIGN KEY (ID_CATALOG)
    REFERENCES public.CATALOG (ID_CATALOG)
    NOT VALID;

END;