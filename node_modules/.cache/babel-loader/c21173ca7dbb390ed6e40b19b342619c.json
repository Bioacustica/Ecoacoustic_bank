{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  wrap: wrapRange,\n  limit: limitRange,\n  validate: validateRange,\n  test: testRange,\n  curry: curry,\n  name: name\n};\n\nfunction wrapRange(min, max, value) {\n  var maxLessMin = max - min;\n  return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;\n}\n\nfunction limitRange(min, max, value) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction validateRange(min, max, value, minExclusive, maxExclusive) {\n  if (!testRange(min, max, value, minExclusive, maxExclusive)) {\n    throw new Error(value + ' is outside of range [' + min + ',' + max + ')');\n  }\n\n  return value;\n}\n\nfunction testRange(min, max, value, minExclusive, maxExclusive) {\n  return !(value < min || value > max || maxExclusive && value === max || minExclusive && value === min);\n}\n\nfunction name(min, max, minExcl, maxExcl) {\n  return (minExcl ? '(' : '[') + min + ',' + max + (maxExcl ? ')' : ']');\n}\n\nfunction curry(min, max, minExclusive, maxExclusive) {\n  var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);\n  return {\n    wrap: wrapRange.bind(null, min, max),\n    limit: limitRange.bind(null, min, max),\n    validate: function (value) {\n      return validateRange(min, max, value, minExclusive, maxExclusive);\n    },\n    test: function (value) {\n      return testRange(min, max, value, minExclusive, maxExclusive);\n    },\n    toString: boundNameFn,\n    name: boundNameFn\n  };\n}","map":{"version":3,"sources":["/bioacustica/node_modules/normalize-range/index.js"],"names":["module","exports","wrap","wrapRange","limit","limitRange","validate","validateRange","test","testRange","curry","name","min","max","value","maxLessMin","Math","minExclusive","maxExclusive","Error","minExcl","maxExcl","boundNameFn","bind","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAEC,SADS;AAEfC,EAAAA,KAAK,EAAEC,UAFQ;AAGfC,EAAAA,QAAQ,EAAEC,aAHK;AAIfC,EAAAA,IAAI,EAAEC,SAJS;AAKfC,EAAAA,KAAK,EAAEA,KALQ;AAMfC,EAAAA,IAAI,EAAEA;AANS,CAAjB;;AASA,SAASR,SAAT,CAAmBS,GAAnB,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoC;AAClC,MAAIC,UAAU,GAAGF,GAAG,GAAGD,GAAvB;AACA,SAAO,CAAC,CAACE,KAAK,GAAGF,GAAT,IAAgBG,UAAhB,GAA6BA,UAA9B,IAA4CA,UAA5C,GAAyDH,GAAhE;AACD;;AAED,SAASP,UAAT,CAAoBO,GAApB,EAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACnC,SAAOE,IAAI,CAACH,GAAL,CAASD,GAAT,EAAcI,IAAI,CAACJ,GAAL,CAASC,GAAT,EAAcC,KAAd,CAAd,CAAP;AACD;;AAED,SAASP,aAAT,CAAuBK,GAAvB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCG,YAAxC,EAAsDC,YAAtD,EAAoE;AAClE,MAAI,CAACT,SAAS,CAACG,GAAD,EAAMC,GAAN,EAAWC,KAAX,EAAkBG,YAAlB,EAAgCC,YAAhC,CAAd,EAA6D;AAC3D,UAAM,IAAIC,KAAJ,CAAUL,KAAK,GAAG,wBAAR,GAAmCF,GAAnC,GAAyC,GAAzC,GAA+CC,GAA/C,GAAqD,GAA/D,CAAN;AACD;;AACD,SAAOC,KAAP;AACD;;AAED,SAASL,SAAT,CAAmBG,GAAnB,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCG,YAApC,EAAkDC,YAAlD,EAAgE;AAC9D,SAAO,EACFJ,KAAK,GAAGF,GAAR,IACAE,KAAK,GAAGD,GADR,IAECK,YAAY,IAAKJ,KAAK,KAAKD,GAF5B,IAGCI,YAAY,IAAKH,KAAK,KAAKF,GAJ1B,CAAP;AAMD;;AAED,SAASD,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwBO,OAAxB,EAAiCC,OAAjC,EAA0C;AACxC,SAAO,CAACD,OAAO,GAAG,GAAH,GAAS,GAAjB,IAAwBR,GAAxB,GAA8B,GAA9B,GAAoCC,GAApC,IAA2CQ,OAAO,GAAG,GAAH,GAAS,GAA3D,CAAP;AACD;;AAED,SAASX,KAAT,CAAeE,GAAf,EAAoBC,GAApB,EAAyBI,YAAzB,EAAuCC,YAAvC,EAAqD;AACnD,MAAII,WAAW,GAAGX,IAAI,CAACY,IAAL,CAAU,IAAV,EAAgBX,GAAhB,EAAqBC,GAArB,EAA0BI,YAA1B,EAAwCC,YAAxC,CAAlB;AACA,SAAO;AACLhB,IAAAA,IAAI,EAAEC,SAAS,CAACoB,IAAV,CAAe,IAAf,EAAqBX,GAArB,EAA0BC,GAA1B,CADD;AAELT,IAAAA,KAAK,EAAEC,UAAU,CAACkB,IAAX,CAAgB,IAAhB,EAAsBX,GAAtB,EAA2BC,GAA3B,CAFF;AAGLP,IAAAA,QAAQ,EAAE,UAASQ,KAAT,EAAgB;AACxB,aAAOP,aAAa,CAACK,GAAD,EAAMC,GAAN,EAAWC,KAAX,EAAkBG,YAAlB,EAAgCC,YAAhC,CAApB;AACD,KALI;AAMLV,IAAAA,IAAI,EAAE,UAASM,KAAT,EAAgB;AACpB,aAAOL,SAAS,CAACG,GAAD,EAAMC,GAAN,EAAWC,KAAX,EAAkBG,YAAlB,EAAgCC,YAAhC,CAAhB;AACD,KARI;AASLM,IAAAA,QAAQ,EAAEF,WATL;AAULX,IAAAA,IAAI,EAAEW;AAVD,GAAP;AAYD","sourcesContent":["'use strict';\nmodule.exports = {\n  wrap: wrapRange,\n  limit: limitRange,\n  validate: validateRange,\n  test: testRange,\n  curry: curry,\n  name: name\n};\n\nfunction wrapRange(min, max, value) {\n  var maxLessMin = max - min;\n  return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;\n}\n\nfunction limitRange(min, max, value) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction validateRange(min, max, value, minExclusive, maxExclusive) {\n  if (!testRange(min, max, value, minExclusive, maxExclusive)) {\n    throw new Error(value + ' is outside of range [' + min + ',' + max + ')');\n  }\n  return value;\n}\n\nfunction testRange(min, max, value, minExclusive, maxExclusive) {\n  return !(\n       value < min ||\n       value > max ||\n       (maxExclusive && (value === max)) ||\n       (minExclusive && (value === min))\n  );\n}\n\nfunction name(min, max, minExcl, maxExcl) {\n  return (minExcl ? '(' : '[') + min + ',' + max + (maxExcl ? ')' : ']');\n}\n\nfunction curry(min, max, minExclusive, maxExclusive) {\n  var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);\n  return {\n    wrap: wrapRange.bind(null, min, max),\n    limit: limitRange.bind(null, min, max),\n    validate: function(value) {\n      return validateRange(min, max, value, minExclusive, maxExclusive);\n    },\n    test: function(value) {\n      return testRange(min, max, value, minExclusive, maxExclusive);\n    },\n    toString: boundNameFn,\n    name: boundNameFn\n  };\n}\n"]},"metadata":{},"sourceType":"script"}