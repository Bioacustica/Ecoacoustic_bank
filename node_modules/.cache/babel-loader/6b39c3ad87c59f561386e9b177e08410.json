{"ast":null,"code":"\"use strict\";\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _defaults(subClass, superClass);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar flexSpec = require('./flex-spec');\n\nvar Declaration = require('../declaration');\n\nvar FlexWrap = /*#__PURE__*/function (_Declaration) {\n  _inheritsLoose(FlexWrap, _Declaration);\n\n  function FlexWrap() {\n    return _Declaration.apply(this, arguments) || this;\n  }\n\n  var _proto = FlexWrap.prototype;\n  /**\n   * Don't add prefix for 2009 spec\n   */\n\n  _proto.set = function set(decl, prefix) {\n    var spec = flexSpec(prefix)[0];\n\n    if (spec !== 2009) {\n      return _Declaration.prototype.set.call(this, decl, prefix);\n    }\n\n    return undefined;\n  };\n\n  return FlexWrap;\n}(Declaration);\n\n_defineProperty(FlexWrap, \"names\", ['flex-wrap']);\n\nmodule.exports = FlexWrap;","map":{"version":3,"sources":["/bioacustica/node_modules/autoprefixer/lib/hacks/flex-wrap.js"],"names":["_defaults","obj","defaults","keys","Object","getOwnPropertyNames","i","length","key","value","getOwnPropertyDescriptor","configurable","undefined","defineProperty","_inheritsLoose","subClass","superClass","prototype","create","constructor","_defineProperty","enumerable","writable","flexSpec","require","Declaration","FlexWrap","_Declaration","apply","arguments","_proto","set","decl","prefix","spec","call","module","exports"],"mappings":"AAAA;;AAEA,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,QAAxB,EAAkC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACC,mBAAP,CAA2BH,QAA3B,CAAX;;AAAiD,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAAE,QAAIE,GAAG,GAAGL,IAAI,CAACG,CAAD,CAAd;AAAmB,QAAIG,KAAK,GAAGL,MAAM,CAACM,wBAAP,CAAgCR,QAAhC,EAA0CM,GAA1C,CAAZ;;AAA4D,QAAIC,KAAK,IAAIA,KAAK,CAACE,YAAf,IAA+BV,GAAG,CAACO,GAAD,CAAH,KAAaI,SAAhD,EAA2D;AAAER,MAAAA,MAAM,CAACS,cAAP,CAAsBZ,GAAtB,EAA2BO,GAA3B,EAAgCC,KAAhC;AAAyC;AAAE;;AAAC,SAAOR,GAAP;AAAa;;AAElU,SAASa,cAAT,CAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C;AAAED,EAAAA,QAAQ,CAACE,SAAT,GAAqBb,MAAM,CAACc,MAAP,CAAcF,UAAU,CAACC,SAAzB,CAArB;AAA0DF,EAAAA,QAAQ,CAACE,SAAT,CAAmBE,WAAnB,GAAiCJ,QAAjC;;AAA2Cf,EAAAA,SAAS,CAACe,QAAD,EAAWC,UAAX,CAAT;AAAkC;;AAEvL,SAASI,eAAT,CAAyBnB,GAAzB,EAA8BO,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAIP,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACS,cAAP,CAAsBZ,GAAtB,EAA2BO,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBY,MAAAA,UAAU,EAAE,IAA5B;AAAkCV,MAAAA,YAAY,EAAE,IAAhD;AAAsDW,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAErB,IAAAA,GAAG,CAACO,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOR,GAAP;AAAa;;AAEjN,IAAIsB,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIE,QAAQ,GAAG,aAAa,UAAUC,YAAV,EAAwB;AAClDb,EAAAA,cAAc,CAACY,QAAD,EAAWC,YAAX,CAAd;;AAEA,WAASD,QAAT,GAAoB;AAClB,WAAOC,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,KAAuC,IAA9C;AACD;;AAED,MAAIC,MAAM,GAAGJ,QAAQ,CAACT,SAAtB;AAEA;AACF;AACA;;AACEa,EAAAA,MAAM,CAACC,GAAP,GAAa,SAASA,GAAT,CAAaC,IAAb,EAAmBC,MAAnB,EAA2B;AACtC,QAAIC,IAAI,GAAGX,QAAQ,CAACU,MAAD,CAAR,CAAiB,CAAjB,CAAX;;AAEA,QAAIC,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAOP,YAAY,CAACV,SAAb,CAAuBc,GAAvB,CAA2BI,IAA3B,CAAgC,IAAhC,EAAsCH,IAAtC,EAA4CC,MAA5C,CAAP;AACD;;AAED,WAAOrB,SAAP;AACD,GARD;;AAUA,SAAOc,QAAP;AACD,CAvB2B,CAuB1BD,WAvB0B,CAA5B;;AAyBAL,eAAe,CAACM,QAAD,EAAW,OAAX,EAAoB,CAAC,WAAD,CAApB,CAAf;;AAEAU,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["\"use strict\";\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar flexSpec = require('./flex-spec');\n\nvar Declaration = require('../declaration');\n\nvar FlexWrap = /*#__PURE__*/function (_Declaration) {\n  _inheritsLoose(FlexWrap, _Declaration);\n\n  function FlexWrap() {\n    return _Declaration.apply(this, arguments) || this;\n  }\n\n  var _proto = FlexWrap.prototype;\n\n  /**\n   * Don't add prefix for 2009 spec\n   */\n  _proto.set = function set(decl, prefix) {\n    var spec = flexSpec(prefix)[0];\n\n    if (spec !== 2009) {\n      return _Declaration.prototype.set.call(this, decl, prefix);\n    }\n\n    return undefined;\n  };\n\n  return FlexWrap;\n}(Declaration);\n\n_defineProperty(FlexWrap, \"names\", ['flex-wrap']);\n\nmodule.exports = FlexWrap;"]},"metadata":{},"sourceType":"script"}