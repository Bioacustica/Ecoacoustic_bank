{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nvar brackets = {\n  /**\n     * Parse string to nodes tree\n     */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(str), _step; !(_step = _iterator()).done;) {\n      var sym = _step.value;\n\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n     * Generate output string by nodes tree\n     */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(ast), _step2; !(_step2 = _iterator2()).done;) {\n      var i = _step2.value;\n\n      if (typeof i === 'object') {\n        result += \"(\" + brackets.stringify(i) + \")\";\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;","map":{"version":3,"sources":["/bioacustica/node_modules/autoprefixer/lib/brackets.js"],"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","next","bind","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","last","array","brackets","parse","str","current","stack","_iterator","_step","sym","push","pop","stringify","ast","result","_iterator2","_step2","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nvar brackets = {\n  /**\n     * Parse string to nodes tree\n     */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(str), _step; !(_step = _iterator()).done;) {\n      var sym = _step.value;\n\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n     * Generate output string by nodes tree\n     */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(ast), _step2; !(_step2 = _iterator2()).done;) {\n      var i = _step2.value;\n\n      if (typeof i === 'object') {\n        result += \"(\" + brackets.stringify(i) + \")\";\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;"]},"metadata":{},"sourceType":"script"}